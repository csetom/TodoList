/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package com.mycompany.beadando2;

import com.mycompany.modulok.Notification;
import com.mycompany.modulok.MyTask;
import com.mycompany.modulok.TaskManager;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.concurrent.Task;
import javax.swing.JList;
import javax.swing.ListModel;

/**
 *
 * @author tcses
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        IndexOfState.put("Folyamatban", 0);
        IndexOfState.put("Kesz", 1);
        IndexOfState.put("Uj", 2);
        notification.start();
        new Thread() {
            public void run() {
                while(true){
                    if(notification.getNotifyingTasks().isEmpty()){
                        
                    } else {
                        ArrayList<MyTask> removable=new ArrayList<MyTask>();
                        notification.getNotifyingTasks().forEach(t->{
                            NotifyLabel.setText(NotifyLabel.getText()+"* "+t.getName()+"\n");
                            removable.add(t);
                        });
                        notification.getNotifyingTasks().removeAll(removable);
                        NotifyTaskFrame.setVisible(true);            
                        NotifyTaskFrame.pack();
                        NotifyTaskFrame.toFront();
                        
                    }
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }
    
    private TaskManager taskManager = new TaskManager();
    private Notification notification = new Notification(taskManager);

    private Hashtable<String, Integer> IndexOfState = new Hashtable<String,Integer>();    
    private String sortState="";
    private String filterState="";
    ArrayList<String> TaskNameInList= new ArrayList<String>();
    protected boolean editedTask=false;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TaskEditFrame = new javax.swing.JFrame();
        TaskHeaderLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TaskDescription = new javax.swing.JTextArea();
        TaskSaveButton = new javax.swing.JButton();
        TaskCancelButton = new javax.swing.JButton();
        TaskDate = new javax.swing.JTextField();
        TaskName = new javax.swing.JTextField();
        TaskState = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        notifyTime = new javax.swing.JSpinner();
        SortState = new javax.swing.ButtonGroup();
        NotifyTaskFrame = new javax.swing.JFrame();
        NotiOk = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        NotifyLabel = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        TaskList = new javax.swing.JList<>();
        NewTask = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        listMenu = new javax.swing.JMenu();
        SortSubMENU = new javax.swing.JMenu();
        SortByName = new javax.swing.JRadioButtonMenuItem();
        sortByStateMenu = new javax.swing.JRadioButtonMenuItem();
        sortByDateMenu = new javax.swing.JRadioButtonMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        TaskEditFrame.setTitle("Task Edit");
        TaskEditFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TaskEditFrame.setFont(new java.awt.Font("aakar", 0, 24)); // NOI18N
        TaskEditFrame.pack();

        TaskHeaderLabel.setText("New Task:");

        TaskDescription.setColumns(20);
        TaskDescription.setRows(5);
        jScrollPane2.setViewportView(TaskDescription);

        TaskSaveButton.setText("Save");
        TaskSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskSaveButtonActionPerformed(evt);
            }
        });

        TaskCancelButton.setText("Cancel");
        TaskCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskCancelButtonActionPerformed(evt);
            }
        });

        TaskDate.setToolTipText("Datum");
        TaskDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskDateActionPerformed(evt);
            }
        });

        TaskName.setToolTipText("Neve");
        TaskName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskNameActionPerformed(evt);
            }
        });

        TaskState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Folyamatban", "Kesz", "Uj" }));
        TaskState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskStateActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Delete the task");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        notifyTime.setToolTipText("Notify time in minute");

        javax.swing.GroupLayout TaskEditFrameLayout = new javax.swing.GroupLayout(TaskEditFrame.getContentPane());
        TaskEditFrame.getContentPane().setLayout(TaskEditFrameLayout);
        TaskEditFrameLayout.setHorizontalGroup(
            TaskEditFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(TaskEditFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TaskEditFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TaskEditFrameLayout.createSequentialGroup()
                        .addGroup(TaskEditFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TaskHeaderLabel)
                            .addComponent(TaskDate)
                            .addGroup(TaskEditFrameLayout.createSequentialGroup()
                                .addComponent(TaskName)
                                .addGap(1, 1, 1)))
                        .addGap(131, 131, 131))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TaskEditFrameLayout.createSequentialGroup()
                        .addComponent(TaskState, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(203, 203, 203))
                    .addGroup(TaskEditFrameLayout.createSequentialGroup()
                        .addGroup(TaskEditFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(notifyTime)
                            .addComponent(TaskSaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TaskCancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        TaskEditFrameLayout.setVerticalGroup(
            TaskEditFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TaskEditFrameLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(TaskHeaderLabel)
                .addGap(15, 15, 15)
                .addComponent(TaskName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TaskDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TaskState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(notifyTime)
                .addGap(18, 18, 18)
                .addGroup(TaskEditFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TaskSaveButton)
                    .addComponent(TaskCancelButton)
                    .addComponent(deleteButton))
                .addGap(40, 40, 40))
        );

        NotifyTaskFrame.setTitle("Notification ");
        NotifyTaskFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        NotifyTaskFrame.setFont(new java.awt.Font("aakar", 0, 24)); // NOI18N
        TaskEditFrame.pack();

        NotiOk.setText("OK");
        NotiOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NotiOkActionPerformed(evt);
            }
        });

        NotifyLabel.setEditable(false);
        NotifyLabel.setColumns(20);
        NotifyLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        NotifyLabel.setRows(5);
        NotifyLabel.setText("Megoldando Taskok:\n");
        NotifyLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        NotifyLabel.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        NotifyLabel.setEnabled(false);
        NotifyLabel.setFocusable(false);
        jScrollPane3.setViewportView(NotifyLabel);

        javax.swing.GroupLayout NotifyTaskFrameLayout = new javax.swing.GroupLayout(NotifyTaskFrame.getContentPane());
        NotifyTaskFrame.getContentPane().setLayout(NotifyTaskFrameLayout);
        NotifyTaskFrameLayout.setHorizontalGroup(
            NotifyTaskFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotifyTaskFrameLayout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(NotiOk)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(NotifyTaskFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
        NotifyTaskFrameLayout.setVerticalGroup(
            NotifyTaskFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotifyTaskFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NotiOk)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Csesznak RT Task Manager 2000 with knucels");
        setFont(new java.awt.Font("DejaVu Sans Mono", 0, 18)); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        TaskList.setModel(GetTaskList());
        TaskList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        TaskList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TaskList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TaskListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TaskList);

        NewTask.setText("New Task");
        NewTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewTaskActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Load");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        listMenu.setText("Lista");

        SortSubMENU.setText("Sort");

        SortState.add(SortByName);
        SortByName.setText("Name");
        SortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByNameActionPerformed(evt);
            }
        });
        SortSubMENU.add(SortByName);

        SortState.add(sortByStateMenu);
        sortByStateMenu.setSelected(true);
        sortByStateMenu.setText("State");
        sortByStateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByStateMenuActionPerformed(evt);
            }
        });
        SortSubMENU.add(sortByStateMenu);

        SortState.add(sortByDateMenu);
        sortByDateMenu.setText("Deadline");
        sortByDateMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByDateMenuActionPerformed(evt);
            }
        });
        SortSubMENU.add(sortByDateMenu);

        listMenu.add(SortSubMENU);

        menuBar.add(listMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(NewTask)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(NewTask, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        taskManager.Save();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        try {
            taskManager.Load();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private String DateToString(Date date) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
        return  dateFormat.format(date);  
    
    }
    private String TodayToString() {
        Date date = Calendar.getInstance().getTime();  
        return DateToString(date);
    }
    
    private Date StringToDate(String sdate) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
        try {
            return dateFormat.parse(sdate);
        } catch (ParseException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            return Calendar.getInstance().getTime();
        }
    }
    
    private void NewTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewTaskActionPerformed
        TaskEditFrame.setVisible(true);
        TaskHeaderLabel.setText("New Task");
        TaskDescription.setText("");
        TaskState.setSelectedIndex(IndexOfState.get("Uj"));
        TaskName.setText("");
        TaskEditFrame.pack();
        TaskEditFrame.toFront();
        TaskDate.setText(TodayToString());
    }//GEN-LAST:event_NewTaskActionPerformed

    private void EditTask(int index){
        String name=TaskNameInList.get(index);
        MyTask task=taskManager.getTaskByName(name);
        if(task!=null ){
            deleteButton.setEnabled(true);
            TaskHeaderLabel.setText("Edit Task");
            TaskDescription.setText(task.getDescription());
            TaskName.setText(task.getName());
            TaskDate.setText(task.GetDeadLineToString());
            TaskEditFrame.setVisible(true);
            TaskEditFrame.pack();
            TaskEditFrame.toFront();

            TaskState.setSelectedIndex(IndexOfState.get(task.getState()));
        };
    }
    private void TaskSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskSaveButtonActionPerformed
        taskManager.addOrEditTask(TaskName.getText(),TaskDescription.getText(),StringToDate(TaskDate.getText()),TaskState.getSelectedItem().toString(), Integer.parseInt(notifyTime.getValue().toString()));
        TaskEditFrame.setVisible(false);
        deleteButton.setEnabled(false);
        UpdateTaskList();
    }//GEN-LAST:event_TaskSaveButtonActionPerformed

    private void TaskCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskCancelButtonActionPerformed
        // TODO add your handling code here:
        TaskEditFrame.setVisible(false);
        taskManager.setEditedTask(null);
        deleteButton.setEnabled(false);
    }//GEN-LAST:event_TaskCancelButtonActionPerformed

    private void TaskListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TaskListMouseClicked
        // TODO add your handling code here:       
        JList list = (JList)evt.getSource();
        if (evt.getClickCount() == 2) {
            // Double-click detected
            int index = list.locationToIndex(evt.getPoint());
            EditTask(index);
        }  
    }//GEN-LAST:event_TaskListMouseClicked

    private void TaskDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TaskDateActionPerformed

    private void TaskNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TaskNameActionPerformed

    private void TaskStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskStateActionPerformed
    }//GEN-LAST:event_TaskStateActionPerformed

    private void SortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByNameActionPerformed
        sortState="ByName";
        UpdateTaskList();        
    }//GEN-LAST:event_SortByNameActionPerformed

    private void sortByStateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByStateMenuActionPerformed
        sortState="ByState";
        UpdateTaskList();
    }//GEN-LAST:event_sortByStateMenuActionPerformed

    private void sortByDateMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByDateMenuActionPerformed
        sortState="ByDeadline";
        UpdateTaskList();
    }//GEN-LAST:event_sortByDateMenuActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        TaskEditFrame.setVisible(false);
        taskManager.deleteTask();
        UpdateTaskList();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        taskManager.Save();
    }//GEN-LAST:event_formWindowClosing

    private void NotiOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NotiOkActionPerformed
        // TODO add your handling code here:
        NotifyTaskFrame.setVisible(false);
        NotifyLabel.setText("Megoldando Taskok:\n");
    }//GEN-LAST:event_NotiOkActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        File file= new File ("README.md");
        try {
            java.awt.Desktop.getDesktop().open(file);
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);  
            }
        });
    }
    Task showMyTask = new Task<Void>() {
        @Override
        protected Void call() throws Exception {
            NotifyTaskFrame.setVisible(true);
            return null;
        };
    };
    
    public ListModel<String> GetTaskList() {
        ArrayList<MyTask> lista = new ArrayList<MyTask>();
        lista=(ArrayList)taskManager.getTasks().clone();
        switch (sortState) {
                case ("ByName"): lista.sort(Menu::SortByName);                
                    break;
                case ("ByState"): lista.sort(Menu::SortByState);       
                break;
                    case ("ByDeadline"): lista.sort(Menu::SortByDate);       
                break;
        }
        switch (filterState) {
//                case ("ByName"): lista.sort(Menu::SortByName);                    
//                    break;
        }
        TaskNameInList = TaskManager.getTaskNames(lista);
          
        return TaskManager.getTasksForListFx(lista);
    }
    public void UpdateTaskList() {
        UpdateTaskList(GetTaskList());
    }
    public void UpdateTaskList(ListModel<String> taskList) {
        TaskList.setModel(taskList);
        TaskList.updateUI();
    }
    
    public static int SortByName(MyTask t1, MyTask t2) {
        return t1.getName().compareTo(t2.getName());
    };
    public static int SortByState(MyTask t1, MyTask t2) {
        return t1.getState().compareTo(t2.getState());
    };
    public static int SortByDate(MyTask t1, MyTask t2) {
        return t1.getDeadLine().compareTo(t2.getDeadLine());
    };
    public static int SortByDeadline(MyTask t1, MyTask t2) {
        return t1.getName().compareTo(t2.getName());
    };
    
    
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NewTask;
    private javax.swing.JButton NotiOk;
    private javax.swing.JTextArea NotifyLabel;
    private javax.swing.JFrame NotifyTaskFrame;
    private javax.swing.JRadioButtonMenuItem SortByName;
    private javax.swing.ButtonGroup SortState;
    private javax.swing.JMenu SortSubMENU;
    private javax.swing.JButton TaskCancelButton;
    private javax.swing.JTextField TaskDate;
    private javax.swing.JTextArea TaskDescription;
    private javax.swing.JFrame TaskEditFrame;
    private javax.swing.JLabel TaskHeaderLabel;
    private javax.swing.JList<String> TaskList;
    private javax.swing.JTextField TaskName;
    private javax.swing.JButton TaskSaveButton;
    private javax.swing.JComboBox<String> TaskState;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenu listMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSpinner notifyTime;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JRadioButtonMenuItem sortByDateMenu;
    private javax.swing.JRadioButtonMenuItem sortByStateMenu;
    // End of variables declaration//GEN-END:variables

}
